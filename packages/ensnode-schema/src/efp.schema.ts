/**
 * Database schema definitions for indexed EFP entities.
 *
 * Note: These schema definitions is also used to build autogenerated GraphQL API.
 */

import { onchainTable, relations } from "ponder";

/**
 * EFP List Token
 *
 * An onchain ERC-721A NFT representing an EFP list minted with the EFPListRegistry contract.
 */
export const efp_listToken = onchainTable("efp_list_token", (p) => ({
  /**
   * EFP List Token ID
   *
   * The ID of the ERC-721A NFT representing an EFP list minted with the EFPListRegistry contract.
   *
   * Represents a `unit256` value.
   */
  id: p.bigint().primaryKey(),

  /**
   * Owner address
   *
   * The address of the current owner of the EFP List Token.
   * * An `EvmAddress` value, which is a lowercase EVM address.
   */
  owner: p.hex().notNull(),

  /**
   * ListStorageLocation ID
   *
   * Value of `EncodedLsl` type (optional, lowercase if present).
   *
   * Stores the ID of the List Storage Location.
   * If the List Storage Location was never created or not in a recognized format,
   * this field value will be `null`.
   *
   * Represents a `unit256` value.
   */
  lslId: p.hex(),
}));

/**
 * EFP List Storage Locations with a recognized format.
 *
 * For now, all are implicitly LSL of type v1 EVM Contract.
 *
 * @link https://docs.efp.app/design/list-storage-location/#onchain-storage
 */
export const efp_listStorageLocation = onchainTable("efp_list_storage_location", (p) => ({
  /**
   * ListStorageLocation ID
   *
   * An `EncodedLsl` value (always lowercase).
   */
  id: p.hex().primaryKey(),

  /**
   * EVM chain ID of the chain where the EFP list records are stored.
   *
   * An `EFPDeploymentChainId` value. Guaranteed to be an integer in
   * the inclusive range of 1 to 2^53-1 (Number.MAX_SAFE_INTEGER in Javascript).
   */
  chainId: p.int8({ mode: "number" }).notNull(),

  /**
   * Contract address on chainId where the EFP list records are stored.
   * An `EvmAddress` value, which is a lowercase EVM address.
   */
  listRecordsAddress: p.hex().notNull(),

  /**
   * Slot
   *
   * A unique identifier within the List Storage Location, distinguishes
   * between multiple EFP lists stored in the same `EFPListRecords` smart contract
   * by serving as the key in mappings for list operations and metadata.
   * It also separates the list's data from the EFP List NFT's token ID, which
   * is managed by the `EFPListRegistry` contract on Base (chain ID 8453) and
   * may not be directly accessible on other Layer 2 chains (e.g., Optimism) or
   * Ethereum Mainnet due to cross-chain data isolation, thereby enabling
   * flexible, chain-agnostic management of list data.
   *
   * Represents a `unit256` value.
   */
  slot: p.bigint().notNull(),
}));

// Define relationship between the "List Token" and the "List Storage Location" entities
// Each List Token has zero-to-one List Storage Location.
// If zero it means the associated List Storage Location was never created or not in a recognized format.
//
// Note: If the List Storage Location was created, but was not recognized,
// it will be stored in the `efp_listToken.lslId` field, but there will be no
// corresponding `efp_listStorageLocation` entity in the database.
//
// List Tokens minted as a batch are created without any List Storage Location:
// - https://github.com/ethereumfollowprotocol/contracts/blob/e8d2f5c/src/EFPListRegistry.sol#L281
// - https://github.com/ethereumfollowprotocol/contracts/blob/e8d2f5c/src/EFPListRegistry.sol#L294
export const efp_listTokenRelations = relations(efp_listToken, ({ one }) => ({
  listStorageLocation: one(efp_listStorageLocation, {
    fields: [efp_listToken.lslId],
    references: [efp_listStorageLocation.id],
  }),
}));
