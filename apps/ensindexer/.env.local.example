# The port ENSIndexer listens on for HTTP requests.
PORT=42069

# RPC configuration
# NOTE: You must configure your own private RPC endpoints.
# ENSIndexer makes millions of RPC requests during operation.
# Public RPC endpoints are rate limited and will not provide acceptable performance.
# You must use only private (paid) RPC endpoints or your own self-hosted RPC service
# that is prepared to support millions of requests (ex: 500+ requests / second)
#
# Each configured RPC endpoint must be prepared to receive and quickly 
# process millions of RPC requests. Private RPC service options include:
# - drpc.org (paid plan) - https://drpc.org/
# - Alchemy (paid plan) - https://www.alchemy.com/
# - QuickNode (paid plan) - https://www.quicknode.com/
# - Infura (paid plan) - https://infura.io/
# - Self-hosted RPC nodes
#
# For the RPC URL of each chain, follow the format: RPC_URL_{chainId}={rpcUrl}
#
# E.g. for Ethereum Mainnet using Alchemy:
# RPC_URL_1=https://eth-mainnet.g.alchemy.com/v2/YOUR_API_KEY


# Ethereum Mainnet: Required by plugins: subgraph
RPC_URL_1=

# Optimism: Required by plugins: 
RPC_URL_10=

# Base Mainnet: Required by plugins: basenames
RPC_URL_8453=

# Linea Mainnet: Required by plugins: lineanames
RPC_URL_59144=

# For the RPC rate limits of each chain, follow the format:
# RPC_REQUEST_RATE_LIMIT_{chainId}={rateLimitInRequestsPerSecond}
# The rate limit is the maximum number of requests per second that can be made
# to the RPC endpoint. For private (paid) RPC endpoints, the rate limit can be 
# set to higher values, depending on the capacity of the endpoint. 
# Default: 500 (suitable for private paid RPC services - public endpoints will fail)
# If no rate limit is set for a given chainId, the DEFAULT_RPC_RATE_LIMIT value
# will be applied.
RPC_REQUEST_RATE_LIMIT_1=500
RPC_REQUEST_RATE_LIMIT_10=500
RPC_REQUEST_RATE_LIMIT_8453=500
RPC_REQUEST_RATE_LIMIT_59144=500

# Database configuration
# This is a namespace for the tables that the indexer will create to store indexed data.
# It should be a string that is unique to the running indexer instance.
#
# Keeping the database schema unique to the indexer instance is important to
# 1) speed up indexing after a restart
# 2) prevent data corruption from multiple indexer app instances writing state
#    concurrently to the same db schema
#
# No two indexer instances can use the same database schema at the same time.
#
# Read more about database schema rules here:
# https://ponder.sh/docs/api-reference/database#database-schema-rules
#
# Avoid using the `public` schema as we force that in the `dev` command. Using `public`
# cause conflicts as you interchange between dev and start commands so use literally
# anything else.
DATABASE_SCHEMA=production
# This is the connection string for the database that the indexer will use to store data.
# It should be in the format of `postgresql://<username>:<password>@<host>:<port>/<database>`
DATABASE_URL=postgresql://dbuser:abcd1234@localhost:5432/my_database

# ENS Namespace Configuration
# An ENS namespace's Identifier (see `@ensnode/datasources` for available options).
NAMESPACE=mainnet

# Plugin Configuration
# Identify which indexer plugins to activate (see `src/plugins` for available plugins)
# This is a comma separated list of one or more available plugin names (case-sensitive).
# NOTE: for subgraph-compatible indexing, the only valid configuration is `PLUGINS=subgraph`
PLUGINS=subgraph,basenames,lineanames,threedns,reverse-resolvers

# Unknown label healing
# This is the URL of the ENSRainbow server that ENSIndexer will use to heal unknown labels.
# The best indexing performance requires a colocated deployments of ENSIndexer and
# ENSRainbow services to minimize latency. For example, both services should
# communicate over the same local network.
# Read more about ENSRainbow here:
# https://ensrainbow.io
# If you need to temporarily use the public ENSRainbow server for testing, set the following:
# ENSRAINBOW_URL=https://api.ensrainbow.io (NOT RECOMMENDED - WILL MAKE INDEXING VERY SLOW!!)
ENSRAINBOW_URL=http://localhost:3223

# The ENSIndexer public service URL
# When the root route `/` of ENSIndexer receives a request, ENSIndexer redirects to the configured
# ENSADMIN_URL with an instruction for that ENSAdmin instance to connect back to this provided URL
# for querying state about the ENSNode instance.
ENSNODE_PUBLIC_URL=http://localhost:42069

# The ENSAdmin service URL
# When the root route `/` of ENSIndexer receives a request, ENSIndexer redirects to this provided
# ENSAdmin URL with an instruction for that ENSAdmin instance to connect back to the configured
# ENSNODE_PUBLIC_URL.
#
# If this is not set, DEFAULT_ENSADMIN_URL will be used to provide easy access to an ENSAdmin UI.
ENSADMIN_URL=https://admin.ensnode.io

# A feature flag to enable or disable healing of addr.reverse subnames
# If this is set to true, ENSIndexer will attempt to heal subnames of addr.reverse
# If this is not set, the default value is set to `DEFAULT_HEAL_REVERSE_ADDRESSES`.
#
# WARNING: Setting this to `true` results in indexed data no longer being backwards compatible with
# the ENS Subgraph. For full data-level backwards compatibility with the ENS Subgraph, set this to `false`.
HEAL_REVERSE_ADDRESSES=true

# A feature flag to enable or disable the indexing of additional Resolver record values
# If this is set to true, ENSIndexer will track additional Resolver record values.
# If this is not set, the default value is set to `DEFAULT_INDEX_ADDITIONAL_RESOLVER_RECORDS` (true).
#
# WARNING: It is unsafe to assume that indexed resolver record values are equivalent to the
# result of performing dynamic forward resolution via the ENS protocol, as naively retrieving resolver
# record values from indexed data is not ENSIP-10 nor CCIP-Read compliant. At this time we do _not_
# recommend anyone directly using the indexed resolver record values; Features are planned in the
# ENSNode roadmap that will provide safe use of indexed resolver record values (in appropriate contexts).
#
# NOTE: Setting this to `true` results in indexed data being a strict _superset_ of subgraph data.
# For exact subgraph data compatibility, set this to `false`.
INDEX_ADDITIONAL_RESOLVER_VALUES=true
