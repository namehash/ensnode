/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as ApiSubgraphRouteImport } from "./routes/api/subgraph";
import { Route as ConnectionRouteImport } from "./routes/connection";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as InspectPrimaryNameRouteImport } from "./routes/inspect/primary-name";
import { Route as InspectPrimaryNamesRouteImport } from "./routes/inspect/primary-names";
import { Route as InspectRecordsRouteImport } from "./routes/inspect/records";
import { Route as InspectVisualizerRouteImport } from "./routes/inspect/visualizer";
import { Route as MockConfigInfoRouteImport } from "./routes/mock/config-info";
import { Route as MockDisplayIdentityRouteImport } from "./routes/mock/display-identity";
import { Route as MockIndexRouteImport } from "./routes/mock/index";
import { Route as MockIndexingStatsRouteImport } from "./routes/mock/indexing-stats";
import { Route as MockRecentRegistrationsRouteImport } from "./routes/mock/recent-registrations";
import { Route as MockRelativeTimeRouteImport } from "./routes/mock/relative-time";
import { Route as NameRouteImport } from "./routes/name";
import { Route as RegistrationRouteImport } from "./routes/registration";
import { Route as StatusRouteImport } from "./routes/status";

const StatusRoute = StatusRouteImport.update({
  id: "/status",
  path: "/status",
  getParentRoute: () => rootRouteImport,
} as any);
const RegistrationRoute = RegistrationRouteImport.update({
  id: "/registration",
  path: "/registration",
  getParentRoute: () => rootRouteImport,
} as any);
const NameRoute = NameRouteImport.update({
  id: "/name",
  path: "/name",
  getParentRoute: () => rootRouteImport,
} as any);
const ConnectionRoute = ConnectionRouteImport.update({
  id: "/connection",
  path: "/connection",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const MockIndexRoute = MockIndexRouteImport.update({
  id: "/mock/",
  path: "/mock/",
  getParentRoute: () => rootRouteImport,
} as any);
const MockRelativeTimeRoute = MockRelativeTimeRouteImport.update({
  id: "/mock/relative-time",
  path: "/mock/relative-time",
  getParentRoute: () => rootRouteImport,
} as any);
const MockRecentRegistrationsRoute = MockRecentRegistrationsRouteImport.update({
  id: "/mock/recent-registrations",
  path: "/mock/recent-registrations",
  getParentRoute: () => rootRouteImport,
} as any);
const MockIndexingStatsRoute = MockIndexingStatsRouteImport.update({
  id: "/mock/indexing-stats",
  path: "/mock/indexing-stats",
  getParentRoute: () => rootRouteImport,
} as any);
const MockDisplayIdentityRoute = MockDisplayIdentityRouteImport.update({
  id: "/mock/display-identity",
  path: "/mock/display-identity",
  getParentRoute: () => rootRouteImport,
} as any);
const MockConfigInfoRoute = MockConfigInfoRouteImport.update({
  id: "/mock/config-info",
  path: "/mock/config-info",
  getParentRoute: () => rootRouteImport,
} as any);
const InspectVisualizerRoute = InspectVisualizerRouteImport.update({
  id: "/inspect/visualizer",
  path: "/inspect/visualizer",
  getParentRoute: () => rootRouteImport,
} as any);
const InspectRecordsRoute = InspectRecordsRouteImport.update({
  id: "/inspect/records",
  path: "/inspect/records",
  getParentRoute: () => rootRouteImport,
} as any);
const InspectPrimaryNamesRoute = InspectPrimaryNamesRouteImport.update({
  id: "/inspect/primary-names",
  path: "/inspect/primary-names",
  getParentRoute: () => rootRouteImport,
} as any);
const InspectPrimaryNameRoute = InspectPrimaryNameRouteImport.update({
  id: "/inspect/primary-name",
  path: "/inspect/primary-name",
  getParentRoute: () => rootRouteImport,
} as any);
const ApiSubgraphRoute = ApiSubgraphRouteImport.update({
  id: "/api/subgraph",
  path: "/api/subgraph",
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/connection": typeof ConnectionRoute;
  "/name": typeof NameRoute;
  "/registration": typeof RegistrationRoute;
  "/status": typeof StatusRoute;
  "/api/subgraph": typeof ApiSubgraphRoute;
  "/inspect/primary-name": typeof InspectPrimaryNameRoute;
  "/inspect/primary-names": typeof InspectPrimaryNamesRoute;
  "/inspect/records": typeof InspectRecordsRoute;
  "/inspect/visualizer": typeof InspectVisualizerRoute;
  "/mock/config-info": typeof MockConfigInfoRoute;
  "/mock/display-identity": typeof MockDisplayIdentityRoute;
  "/mock/indexing-stats": typeof MockIndexingStatsRoute;
  "/mock/recent-registrations": typeof MockRecentRegistrationsRoute;
  "/mock/relative-time": typeof MockRelativeTimeRoute;
  "/mock": typeof MockIndexRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/connection": typeof ConnectionRoute;
  "/name": typeof NameRoute;
  "/registration": typeof RegistrationRoute;
  "/status": typeof StatusRoute;
  "/api/subgraph": typeof ApiSubgraphRoute;
  "/inspect/primary-name": typeof InspectPrimaryNameRoute;
  "/inspect/primary-names": typeof InspectPrimaryNamesRoute;
  "/inspect/records": typeof InspectRecordsRoute;
  "/inspect/visualizer": typeof InspectVisualizerRoute;
  "/mock/config-info": typeof MockConfigInfoRoute;
  "/mock/display-identity": typeof MockDisplayIdentityRoute;
  "/mock/indexing-stats": typeof MockIndexingStatsRoute;
  "/mock/recent-registrations": typeof MockRecentRegistrationsRoute;
  "/mock/relative-time": typeof MockRelativeTimeRoute;
  "/mock": typeof MockIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/connection": typeof ConnectionRoute;
  "/name": typeof NameRoute;
  "/registration": typeof RegistrationRoute;
  "/status": typeof StatusRoute;
  "/api/subgraph": typeof ApiSubgraphRoute;
  "/inspect/primary-name": typeof InspectPrimaryNameRoute;
  "/inspect/primary-names": typeof InspectPrimaryNamesRoute;
  "/inspect/records": typeof InspectRecordsRoute;
  "/inspect/visualizer": typeof InspectVisualizerRoute;
  "/mock/config-info": typeof MockConfigInfoRoute;
  "/mock/display-identity": typeof MockDisplayIdentityRoute;
  "/mock/indexing-stats": typeof MockIndexingStatsRoute;
  "/mock/recent-registrations": typeof MockRecentRegistrationsRoute;
  "/mock/relative-time": typeof MockRelativeTimeRoute;
  "/mock/": typeof MockIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/connection"
    | "/name"
    | "/registration"
    | "/status"
    | "/api/subgraph"
    | "/inspect/primary-name"
    | "/inspect/primary-names"
    | "/inspect/records"
    | "/inspect/visualizer"
    | "/mock/config-info"
    | "/mock/display-identity"
    | "/mock/indexing-stats"
    | "/mock/recent-registrations"
    | "/mock/relative-time"
    | "/mock";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/connection"
    | "/name"
    | "/registration"
    | "/status"
    | "/api/subgraph"
    | "/inspect/primary-name"
    | "/inspect/primary-names"
    | "/inspect/records"
    | "/inspect/visualizer"
    | "/mock/config-info"
    | "/mock/display-identity"
    | "/mock/indexing-stats"
    | "/mock/recent-registrations"
    | "/mock/relative-time"
    | "/mock";
  id:
    | "__root__"
    | "/"
    | "/connection"
    | "/name"
    | "/registration"
    | "/status"
    | "/api/subgraph"
    | "/inspect/primary-name"
    | "/inspect/primary-names"
    | "/inspect/records"
    | "/inspect/visualizer"
    | "/mock/config-info"
    | "/mock/display-identity"
    | "/mock/indexing-stats"
    | "/mock/recent-registrations"
    | "/mock/relative-time"
    | "/mock/";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  ConnectionRoute: typeof ConnectionRoute;
  NameRoute: typeof NameRoute;
  RegistrationRoute: typeof RegistrationRoute;
  StatusRoute: typeof StatusRoute;
  ApiSubgraphRoute: typeof ApiSubgraphRoute;
  InspectPrimaryNameRoute: typeof InspectPrimaryNameRoute;
  InspectPrimaryNamesRoute: typeof InspectPrimaryNamesRoute;
  InspectRecordsRoute: typeof InspectRecordsRoute;
  InspectVisualizerRoute: typeof InspectVisualizerRoute;
  MockConfigInfoRoute: typeof MockConfigInfoRoute;
  MockDisplayIdentityRoute: typeof MockDisplayIdentityRoute;
  MockIndexingStatsRoute: typeof MockIndexingStatsRoute;
  MockRecentRegistrationsRoute: typeof MockRecentRegistrationsRoute;
  MockRelativeTimeRoute: typeof MockRelativeTimeRoute;
  MockIndexRoute: typeof MockIndexRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/status": {
      id: "/status";
      path: "/status";
      fullPath: "/status";
      preLoaderRoute: typeof StatusRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/registration": {
      id: "/registration";
      path: "/registration";
      fullPath: "/registration";
      preLoaderRoute: typeof RegistrationRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/name": {
      id: "/name";
      path: "/name";
      fullPath: "/name";
      preLoaderRoute: typeof NameRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/connection": {
      id: "/connection";
      path: "/connection";
      fullPath: "/connection";
      preLoaderRoute: typeof ConnectionRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/mock/": {
      id: "/mock/";
      path: "/mock";
      fullPath: "/mock";
      preLoaderRoute: typeof MockIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/mock/relative-time": {
      id: "/mock/relative-time";
      path: "/mock/relative-time";
      fullPath: "/mock/relative-time";
      preLoaderRoute: typeof MockRelativeTimeRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/mock/recent-registrations": {
      id: "/mock/recent-registrations";
      path: "/mock/recent-registrations";
      fullPath: "/mock/recent-registrations";
      preLoaderRoute: typeof MockRecentRegistrationsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/mock/indexing-stats": {
      id: "/mock/indexing-stats";
      path: "/mock/indexing-stats";
      fullPath: "/mock/indexing-stats";
      preLoaderRoute: typeof MockIndexingStatsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/mock/display-identity": {
      id: "/mock/display-identity";
      path: "/mock/display-identity";
      fullPath: "/mock/display-identity";
      preLoaderRoute: typeof MockDisplayIdentityRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/mock/config-info": {
      id: "/mock/config-info";
      path: "/mock/config-info";
      fullPath: "/mock/config-info";
      preLoaderRoute: typeof MockConfigInfoRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/inspect/visualizer": {
      id: "/inspect/visualizer";
      path: "/inspect/visualizer";
      fullPath: "/inspect/visualizer";
      preLoaderRoute: typeof InspectVisualizerRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/inspect/records": {
      id: "/inspect/records";
      path: "/inspect/records";
      fullPath: "/inspect/records";
      preLoaderRoute: typeof InspectRecordsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/inspect/primary-names": {
      id: "/inspect/primary-names";
      path: "/inspect/primary-names";
      fullPath: "/inspect/primary-names";
      preLoaderRoute: typeof InspectPrimaryNamesRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/inspect/primary-name": {
      id: "/inspect/primary-name";
      path: "/inspect/primary-name";
      fullPath: "/inspect/primary-name";
      preLoaderRoute: typeof InspectPrimaryNameRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/api/subgraph": {
      id: "/api/subgraph";
      path: "/api/subgraph";
      fullPath: "/api/subgraph";
      preLoaderRoute: typeof ApiSubgraphRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ConnectionRoute: ConnectionRoute,
  NameRoute: NameRoute,
  RegistrationRoute: RegistrationRoute,
  StatusRoute: StatusRoute,
  ApiSubgraphRoute: ApiSubgraphRoute,
  InspectPrimaryNameRoute: InspectPrimaryNameRoute,
  InspectPrimaryNamesRoute: InspectPrimaryNamesRoute,
  InspectRecordsRoute: InspectRecordsRoute,
  InspectVisualizerRoute: InspectVisualizerRoute,
  MockConfigInfoRoute: MockConfigInfoRoute,
  MockDisplayIdentityRoute: MockDisplayIdentityRoute,
  MockIndexingStatsRoute: MockIndexingStatsRoute,
  MockRecentRegistrationsRoute: MockRecentRegistrationsRoute,
  MockRelativeTimeRoute: MockRelativeTimeRoute,
  MockIndexRoute: MockIndexRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
