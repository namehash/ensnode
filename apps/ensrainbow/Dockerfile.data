# Base working stage
FROM node:18-slim AS base
ARG PNPM_VERSION=9.12.0
RUN apt-get update && \
    npm install -g pnpm@${PNPM_VERSION}
WORKDIR /app

###################
## Data Stage — download ENS Subgraph rainbow table archive & checksum
###################

FROM base AS db-data
RUN apt-get install -y wget
COPY apps/ensrainbow/package.json ./apps/ensrainbow/package.json
COPY apps/ensrainbow/download-rainbow-tables.sh ./apps/ensrainbow/download-rainbow-tables.sh

WORKDIR /app/apps/ensrainbow
# Allow parametrization of which data version to download
# Possible values: "v1" (default) or "v2" or "test"
# This ARG is used to determine which data fetching command to run during the build process.
# It can be set using the --build-arg flag when building the Docker image.
ARG DATA_VERSION="v1"
RUN if [ "$DATA_VERSION" = "v1" ]; then \
        pnpm get-legacy-data; \
    elif [ "$DATA_VERSION" = "v2" ]; then \
        pnpm get-v2-data; \
    elif [ "$DATA_VERSION" = "test" ]; then \
        pnpm get-test-data; \
    fi
###################
## Dependencies Stage — standard monorepo pnpm install from base
###################

FROM base AS ingest-deps

COPY pnpm-workspace.yaml ./
COPY package.json pnpm-lock.yaml ./
COPY packages ./packages
COPY apps ./apps

RUN pnpm install --frozen-lockfile

###################
## Runtime Stage — ingest to produce data dir artifact
###################

FROM ingest-deps AS ingest

WORKDIR /app/apps/ensrainbow
# copy ens_names.sql.gz from db-data
COPY --from=db-data /app/apps/ensrainbow/ens_names.sql.gz .
COPY --from=db-data /app/apps/ensrainbow/THE_GRAPH_LICENSE.txt .

# produce the data dir artifact
RUN pnpm run ingest

# cleanup input file to reduce image size
RUN rm ens_names.sql.gz

###################
## Output Image — just the data dir
###################

FROM base AS ensrainbow-data
ARG DATA_VERSION="v1"
# Set a label to identify the data version
LABEL io.ensnode.data-version=${DATA_VERSION}

COPY --from=ingest /app/apps/ensrainbow/data ./data
