---
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";

export async function getStaticPaths() {
  const examples = await getCollection("examples");

  return examples.map((example) => ({
    params: {
      slug: example.data.name
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, "-")
        .replace(/(^-|-$)/g, ""),
    },
    props: { example: example.data },
  }));
}

const { example } = Astro.props;
---

<Layout title={`${example.name} - GraphQL Query Example`}>
  <div class="bg-gray-50 min-h-screen">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8 xl:pt-32">

      <div class="mb-8">
        <a
          href="/examples"
          class="inline-flex items-center text-sm text-gray-600 hover:text-gray-900 transition-colors"
        >
          <svg class="h-4 w-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
          Back to Examples
        </a>
      </div>


      <div class="mb-8">
        <div class="mb-4">
          <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
            {example.category}
          </span>
        </div>
        <h1 class="text-4xl font-bold text-gray-900 mb-4">{example.name}</h1>
        <p class="text-xl text-gray-600">{example.description}</p>
      </div>


      <div class="mb-8 flex flex-col sm:flex-row gap-4">
        <button
          id="openInENSAdmin"
          class="inline-flex justify-center items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
        >
          <svg class="h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
          </svg>
          Open in ENSAdmin
        </button>

        <button
          id="copyQuery"
          class="inline-flex justify-center items-center px-6 py-3 border border-gray-300 text-base font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
        >
          <svg class="h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
          </svg>
          Copy Query
        </button>
      </div>

      <div class="bg-white rounded-lg border border-gray-200 shadow-sm mb-8">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-semibold text-gray-900">GraphQL Query</h2>
        </div>
        <div class="p-6">
          <pre class="bg-gray-50 p-4 rounded-lg overflow-x-auto text-sm"><code id="queryCode">{example.query}</code></pre>
        </div>
      </div>


      <div class="bg-white rounded-lg border border-gray-200 shadow-sm">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-semibold text-gray-900">Variables</h2>
        </div>
        <div class="p-6">
          <pre class="bg-gray-50 p-4 rounded-lg overflow-x-auto text-sm"><code id="variablesCode">{example.variables}</code></pre>
        </div>
      </div>
    </div>
  </div>

  <script define:vars={{ example }}>
    document.getElementById('openInENSAdmin').addEventListener('click', function() {
      try {
        const baseUrl = "https://admin.ensnode.io/gql/subgraph-compat";
        const params = new URLSearchParams({
          query: example.query.trim(),
          variables: example.variables.trim(),
        });
        const url = `${baseUrl}?${params.toString()}`;

        window.open(url, "_blank", "noopener,noreferrer");
      } catch (err) {
        console.error("Failed to open in ENSAdmin: ", err);
      }
    });


    document.getElementById('copyQuery').addEventListener('click', function() {
      const queryText = example.query;

      if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(queryText).then(() => {
          // Show some toaster
        }).catch(() => {
          fallbackCopyTextToClipboard(queryText);
        });
      } else {
        fallbackCopyTextToClipboard(queryText);
      }
    });

    function fallbackCopyTextToClipboard(text) {
      const textArea = document.createElement("textarea");
      textArea.value = text;
      textArea.style.top = "0";
      textArea.style.left = "0";
      textArea.style.position = "fixed";

      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();

      try {
        const successful = document.execCommand('copy');
        if (successful) {
          // Show some toaster
        } else {
          // Show some toaster
        }
      } catch (err) {
        console.error('Fallback: Oops, unable to copy', err);
        // Show some toaster
      }

      document.body.removeChild(textArea);
    }
  </script>
</Layout>
