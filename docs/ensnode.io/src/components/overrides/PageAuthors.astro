---
import { GITHUB_TOKEN } from "astro:env/server";
import { Octokit } from "@octokit/rest";

interface Props {
  repo: string;
  file: string;
}

interface AuthorInfo {
  login: string;
  id: number;
  name: string;
  date: string;
  message: string;
}

const { repo, file } = Astro.props;

let commits: any[] = [];
let error: Error | null = null;
let uniqueAuthors: AuthorInfo[] = [];

const octokit = new Octokit({
  auth: GITHUB_TOKEN || undefined,
});

if (!GITHUB_TOKEN) {
  console.warn(
    "Warning: GITHUB_TOKEN environment variable is not set. Using public GitHub API which has strict rate limits.",
  );
}

try {
  const [owner, repoName] = repo.split("/");

  const response = await octokit.repos.listCommits({
    owner,
    repo: repoName,
    path: file,
    per_page: 100,
  });

  commits = response.data;

  uniqueAuthors = filterAndRemoveDuplicates(commits);
} catch (e) {
  error = e instanceof Error ? e : new Error(String(e));
  console.error("Error fetching contributors:", error);
}

function filterAndRemoveDuplicates(commits: any[]): AuthorInfo[] {
  if (!commits || !Array.isArray(commits)) return [];

  const map = new Map<number, AuthorInfo>();

  for (const commit of commits) {
    const author = commit.author;

    // Skip bot commits (like dependabot)
    if (author && author.id && author.login && !author.login.includes("bot")) {
      map.set(author.id, {
        login: author.login,
        id: author.id,
        name: commit.commit?.author?.name || author.login,
        date: commit.commit?.author?.date || "",
        message: commit.commit?.message?.split("\n")[0] || "",
      });
    }
  }

  return Array.from(map.values()).sort(
    (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime(),
  );
}

const MAX_AUTHORS_TO_SHOW = 12;
const displayedAuthors = uniqueAuthors.slice(0, MAX_AUTHORS_TO_SHOW);
const hasMoreAuthors = uniqueAuthors.length > MAX_AUTHORS_TO_SHOW;
const additionalAuthorsCount = uniqueAuthors.length - MAX_AUTHORS_TO_SHOW;
---

{!error && displayedAuthors.length > 0 && (
  <div class="flex flex-col gap-2 text-sm font-semibold">
    <p class="flex items-center gap-2 text-slate-500">
      Contributions by
      {hasMoreAuthors && <span class="text-xs font-normal text-slate-400">+{additionalAuthorsCount} more</span>}
    </p>
    <ul class="list-none flex flex-wrap gap-2.5 p-px text-[var(--avatar-size)] max-w-full not-content">
      {displayedAuthors.map(({ login, id, name }) => (
        <li class="w-[var(--avatar-size)] h-[var(--avatar-size)]">
          <a
            href={`https://github.com/${login}`}
            title={`${name || login}`}
            target="_blank"
            rel="noopener noreferrer"
            class="block rounded-full transition-transform duration-180 relative hover:scale-110 hover:z-10 focus:outline-offset-2 focus:outline-2 focus:outline-[#29344B]"
          >
            <img
              alt={`Contributor ${name || login}`}
              width="64"
              height="64"
              src={`https://avatars.githubusercontent.com/u/${id}`}
              loading="lazy"
              class="w-full h-full object-cover rounded-full bg-white shadow-[0_0_0_0.05em_#fff,0_0_0_0.08em_rgba(0,0,0,0.15)]"
            />
          </a>
        </li>
      ))}
    </ul>
  </div>
)}

<style define:vars={{ 'avatar-size': '2rem' }}>
.debug-info {
  font-size: 0.8rem;
  padding: 0.5rem;
  background: #f5f5f5;
  border: 1px solid #ddd;
  border-radius: 4px;
}
</style>
